# -*- coding: utf-8 -*-
"""FaceMaskPreprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12IbOzMXD5qM8oEjk1m0NxTewfbVpT-Qn
"""

import os
import cv2
import numpy as np
import random
import matplotlib.pyplot as plt
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Define input and output paths
input_folder = '/content/drive/MyDrive/Dataset'
output_folder = '/content/drive/MyDrive/PreprocessedImg'
augmented_output_folder = '/content/drive/MyDrive/AugImgs'

# Create output folders if they don't exist
os.makedirs(output_folder, exist_ok=True)
os.makedirs(augmented_output_folder, exist_ok=True)

# Function to preprocess images
def preprocess_image(image):
    # Resize image to a uniform size
    resized_image = cv2.resize(image, (128, 128))

    # Contrast stretching
    normalized_img = np.zeros(resized_image.shape)
    normalized_img = cv2.normalize(resized_image, normalized_img, 0, 255, cv2.NORM_MINMAX)
    contrast_stretched_image = np.uint8(normalized_img)

    # Gaussian Blur
    blurred_image = cv2.GaussianBlur(contrast_stretched_image, (7, 5), 0)

    # Sharpening (enhance quality)
    kernel_sharpening = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])
    sharpened_image = cv2.filter2D(blurred_image, -1, kernel_sharpening)

    return sharpened_image

# Define augmentation functions
def random_geometric_transform(image):
    transformations = [
        horizontal_translation,
        vertical_translation,
        rotation
    ]
    # Randomly select one geometric transformation and apply it
    transform = random.choice(transformations)
    return transform(image)

def horizontal_translation(image, max_percent=10):
    rows, cols = image.shape[:2]
    max_pixel = int(cols * abs(max_percent) / 100)
    dx = np.random.randint(-max_pixel, max_pixel)
    M = np.float32([[1, 0, dx], [0, 1, 0]])
    return cv2.warpAffine(image, M, (cols, rows))

def vertical_translation(image, max_percent=10):
    rows, cols = image.shape[:2]
    max_pixel = int(rows * abs(max_percent) / 100)
    dy = np.random.randint(-max_pixel, max_pixel)
    M = np.float32([[1, 0, 0], [0, 1, dy]])
    return cv2.warpAffine(image, M, (cols, rows))

def rotation(image, max_angle=10):
    rows, cols = image.shape[:2]
    angle = np.random.uniform(-max_angle, max_angle)
    M = cv2.getRotationMatrix2D((cols/2, rows/2), angle, 1)
    return cv2.warpAffine(image, M, (cols, rows))

def horizontal_flip(image):
    return cv2.flip(image, 1) if random.random() < 0.5 else image

# Process and augment images
for filename in os.listdir(input_folder):
    original_image_path = os.path.join(input_folder, filename)
    original_image = cv2.imread(original_image_path)

    if original_image is not None:
        processed_image = preprocess_image(original_image)
        output_path = os.path.join(output_folder, filename)
        cv2.imwrite(output_path, processed_image)

        # Augment and save the processed image
        augmented_image = random_geometric_transform(processed_image)
        if random.random() < 0.5:
            augmented_image = horizontal_flip(augmented_image)

        augmented_filename = f"{os.path.splitext(filename)[0]}_aug.png"
        augmented_image_path = os.path.join(augmented_output_folder, augmented_filename)
        cv2.imwrite(augmented_image_path, augmented_image)

        # Display original, processed, and augmented images
        fig, axes = plt.subplots(1, 3, figsize=(15, 5))
        axes[0].imshow(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
        axes[0].set_title('Original Image')
        axes[0].axis('off')
        axes[1].imshow(cv2.cvtColor(processed_image, cv2.COLOR_BGR2RGB))
        axes[1].set_title('Processed Image')
        axes[1].axis('off')
        axes[2].imshow(cv2.cvtColor(augmented_image, cv2.COLOR_BGR2RGB))
        axes[2].set_title('Augmented Image')
        axes[2].axis('off')
        plt.show()

    else:
        print(f"Error reading {filename}. Skipped.")

import os

# Define paths
output_folder = '/content/drive/MyDrive/Dataset'

# Variable to count processed images
processed_image_count = 0

# Count processed images
for filename in os.listdir(output_folder):
    if os.path.isfile(os.path.join(output_folder, filename)):
        processed_image_count += 1

# Print count of processed images
print(f"Total number of images: {processed_image_count}")

import os

# Define paths
output_folder = '/content/drive/MyDrive/PreprocessedImg'

# Variable to count processed images
processed_image_count = 0

# Count processed images
for filename in os.listdir(output_folder):
    if os.path.isfile(os.path.join(output_folder, filename)):
        processed_image_count += 1

# Print count of processed images
print(f"Total number of processed images: {processed_image_count}")

import os

# Define paths
output_folder = '/content/drive/MyDrive/AugImgs'

# Variable to count processed images
processed_image_count = 0

# Count processed images
for filename in os.listdir(output_folder):
    if os.path.isfile(os.path.join(output_folder, filename)):
        processed_image_count += 1

# Print count of processed images
print(f"Total number of augmented images: {processed_image_count}")